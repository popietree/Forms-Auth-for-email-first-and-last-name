{"version":3,"sources":["hooks/use-input-reducer.js","components/BasicForm.js","App.js","index.js"],"names":["initialInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","useReducer","inputState","dispatch","valueIsValid","hasError","isValid","valueChangeHandler","event","target","inputBlurHandler","reset","isNotEmpty","trim","isEmail","includes","BasicForm","props","enteredFirstName","firstNameHasError","enteredFirstNameIsValid","firstNameChangeHandler","firstNameBlurHandler","resetFirstNameInput","enteredLastName","lastNameHasError","enteredLastNameIsValid","lastNameChangeHandler","lastNameBlurHandler","resetLastNameInput","enteredEmail","emailHasError","enteredEmailIsValid","emailChangeHandler","emailBlurHandler","resetEmailInput","determineInputClass","inputHasError","firstNameInputClasses","lastNameInputClasses","emailInputClasses","formIsValid","onSubmit","preventDefault","className","htmlFor","onBlur","onChange","id","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"0LAEMA,EAAoB,CACxBC,MAAO,GACPC,WAAW,GAGPC,EAAoB,SAApBA,EAAqBC,EAAOC,GAChC,MAAoB,UAAhBA,EAAOC,KAEF,CAAEL,MAAOI,EAAOJ,MAAOC,UAAWE,EAAMF,WAG7B,SAAhBG,EAAOC,KACF,CAAEJ,WAAW,EAAMD,MAAOG,EAAMH,OAErB,UAAhBI,EAAOC,KACF,CAAEL,MAAO,GAAIC,WAAW,GAE1BC,GAiCMI,EA9BE,SAACC,GAChB,MAA+BC,qBAC7BN,EACAH,GAFF,mBAAOU,EAAP,KAAmBC,EAAnB,KAKMC,EAAeJ,EAAcE,EAAWT,OACxCY,GAAYD,GAAgBF,EAAWR,UAc7C,MAAO,CACLD,MAAOS,EAAWT,MAClBY,WACAC,QAASF,EACTG,mBAhByB,SAACC,GAC1BL,EAAS,CAAEL,KAAM,QAASL,MAAOe,EAAMC,OAAOhB,SAgB9CiB,iBAbuB,SAACF,GACxBL,EAAS,CAAEL,KAAM,UAajBa,MAVY,WACZR,EAAS,CAAEL,KAAM,aCtCfc,EAAa,SAACnB,GAAD,MAA4B,KAAjBA,EAAMoB,QAC9BC,EAAU,SAACrB,GAAD,OAAWA,EAAMsB,SAAS,MA6G3BC,EA5GG,SAACC,GACjB,MAOIlB,EAASa,GANJM,EADT,EACEzB,MACU0B,EAFZ,EAEEd,SACSe,EAHX,EAGEd,QACoBe,EAJtB,EAIEd,mBACkBe,EALpB,EAKEZ,iBACOa,EANT,EAMEZ,MAGF,EAOIZ,EAASa,GANJY,EADT,EACE/B,MACUgC,EAFZ,EAEEpB,SACSqB,EAHX,EAGEpB,QACoBqB,EAJtB,EAIEpB,mBACkBqB,EALpB,EAKElB,iBACOmB,EANT,EAMElB,MAGF,EAOIZ,EAASe,GANJgB,EADT,EACErC,MACUsC,EAFZ,EAEE1B,SACS2B,EAHX,EAGE1B,QACoB2B,EAJtB,EAIE1B,mBACkB2B,EALpB,EAKExB,iBACOyB,EANT,EAMExB,MAGIyB,EAAsB,SAACC,GAAD,OAC1BA,EAAgB,uBAAyB,gBACrCC,EAAwBF,EAAoBjB,GAC5CoB,EAAuBH,EAAoBX,GAC3Ce,EAAoBJ,EAAoBL,GAE1CU,GAAc,EAEhBT,GACAN,GACAN,IAEAqB,GAAc,GAehB,OACE,uBAAMC,SAbkB,SAAClC,GACzBA,EAAMmC,iBAEDF,IAILlB,IACAM,IACAM,MAIA,UACE,sBAAKS,UAAU,gBAAf,UACE,sBAAKA,UAAWN,EAAhB,UACE,uBAAOO,QAAQ,OAAf,wBACA,uBACEC,OAAQxB,EACRyB,SAAU1B,EACVvB,KAAK,OACLkD,GAAG,OACHvD,MAAOyB,IAGRC,GACC,mBAAGyB,UAAU,aAAb,wCAGJ,sBAAKA,UAAWL,EAAhB,UACE,uBAAOM,QAAQ,OAAf,uBACA,uBACEC,OAAQlB,EACRmB,SAAUpB,EACV7B,KAAK,OACLkD,GAAG,OACHvD,MAAO+B,IAGRC,GACC,mBAAGmB,UAAU,aAAb,2CAIN,sBAAKA,UAAWJ,EAAhB,UACE,uBAAOK,QAAQ,OAAf,4BACA,uBACEC,OAAQZ,EACRa,SAAUd,EACVnC,KAAK,OACLkD,GAAG,OACHvD,MAAOqC,IAGRC,GACC,mBAAGa,UAAU,aAAb,yCAGJ,qBAAKA,UAAU,eAAf,SACE,wBAAQK,UAAWR,EAAnB,2BC/FOS,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCDNO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.14f0173b.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\nconst initialInputState = {\n  value: \"\",\n  isTouched: false,\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"INPUT\") {\n    //need to replace all state values, does not merge\n    return { value: action.value, isTouched: state.isTouched };\n    //dont set tocuhed to true becuase is ony a keystroke, not finished typing\n  }\n  if (action.type === \"BLUR\") {\n    return { isTouched: true, value: state.value };\n  }\n  if (action.type === \"RESET\") {\n    return { value: \"\", isTouched: false };\n  }\n  return inputStateReducer;\n};\n\nconst useInput = (validateValue) => {\n  const [inputState, dispatch] = useReducer(\n    inputStateReducer,\n    initialInputState\n  );\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = (event) => {\n    dispatch({ type: \"INPUT\", value: event.target.value });\n  };\n\n  const inputBlurHandler = (event) => {\n    dispatch({ type: \"BLUR\" });\n  };\n\n  const reset = () => {\n    dispatch({ type: \"RESET\" });\n  };\n\n  return {\n    value: inputState.value,\n    hasError, // expose handlers so can be called from component using hook\n    isValid: valueIsValid,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\nexport default useInput;\n","import useInput from \"../hooks/use-input-reducer\";\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\nconst isEmail = (value) => value.includes(\"@\");\nconst BasicForm = (props) => {\n  const {\n    value: enteredFirstName,\n    hasError: firstNameHasError,\n    isValid: enteredFirstNameIsValid,\n    valueChangeHandler: firstNameChangeHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstNameInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredLastName,\n    hasError: lastNameHasError,\n    isValid: enteredLastNameIsValid,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastNameInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredEmail,\n    hasError: emailHasError,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput(isEmail);\n\n  const determineInputClass = (inputHasError) =>\n    inputHasError ? \"form-control invalid\" : \"form-control\";\n  const firstNameInputClasses = determineInputClass(firstNameHasError);\n  const lastNameInputClasses = determineInputClass(lastNameHasError);\n  const emailInputClasses = determineInputClass(emailHasError);\n\n  let formIsValid = false;\n  if (\n    enteredEmailIsValid &&\n    enteredLastNameIsValid &&\n    enteredFirstNameIsValid\n  ) {\n    formIsValid = true;\n  }\n\n  const FormSubmitHandler = (event) => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n\n    resetFirstNameInput();\n    resetLastNameInput();\n    resetEmailInput();\n  };\n\n  return (\n    <form onSubmit={FormSubmitHandler}>\n      <div className=\"control-group\">\n        <div className={firstNameInputClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            onBlur={firstNameBlurHandler}\n            onChange={firstNameChangeHandler}\n            type=\"text\"\n            id=\"name\"\n            value={enteredFirstName}\n          />\n\n          {firstNameHasError && (\n            <p className=\"error-text\">Name entered is invalid</p>\n          )}\n        </div>\n        <div className={lastNameInputClasses}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            onBlur={lastNameBlurHandler}\n            onChange={lastNameChangeHandler}\n            type=\"text\"\n            id=\"name\"\n            value={enteredLastName}\n          />\n\n          {lastNameHasError && (\n            <p className=\"error-text\">Name entered is invalid</p>\n          )}\n        </div>\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          onBlur={emailBlurHandler}\n          onChange={emailChangeHandler}\n          type=\"text\"\n          id=\"name\"\n          value={enteredEmail}\n        />\n\n        {emailHasError && (\n          <p className=\"error-text\">Please enter valid email</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}> Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","import SimpleInputPractice from \"./components/SimpleInputPractice\";\nimport BasicForm from \"./components/BasicForm\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}